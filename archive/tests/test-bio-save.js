#!/usr/bin/env node

/**
 * üß™ TEST SAUVEGARDE CHAMP BIO
 * Teste la sauvegarde du champ bio apr√®s ajout de la colonne
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase (client avec cl√© anonyme)
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testBioSave() {
  console.log('üß™ TEST SAUVEGARDE CHAMP BIO')
  console.log('============================')

  try {
    // 1. Connexion avec un utilisateur professionnel
    console.log('\nüîê CONNEXION UTILISATEUR PROFESSIONNEL:')
    const email = 'pro.ekicare@ekicare.com'
    const password = 'TestPassword123!'
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email,
      password
    })

    if (authError) {
      console.error('‚ùå Erreur de connexion:', authError.message)
      return
    }

    console.log(`‚úÖ Utilisateur connect√©: ${authData.user.email}`)
    console.log(`   ID: ${authData.user.id}`)

    // 2. V√©rifier l'√©tat actuel du profil
    console.log('\nüìä √âTAT ACTUEL DU PROFIL:')
    const { data: currentProfile, error: currentError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, payment_methods, nom, prenom')
      .eq('user_id', authData.user.id)
      .single()

    if (currentError) {
      console.log(`‚ùå Erreur lecture profil actuel: ${currentError.message}`)
      console.log('üí° Ex√©cuter le script add-missing-columns-pro-profiles.sql')
      return
    } else {
      console.log(`‚úÖ Profil actuel:`)
      console.log(`   Nom: ${currentProfile.nom} ${currentProfile.prenom}`)
      console.log(`   Bio actuelle: ${currentProfile.bio || 'Aucune'}`)
      console.log(`   Exp√©rience: ${currentProfile.experience_years || 'Non d√©finie'} ans`)
      console.log(`   Gamme de prix: ${currentProfile.price_range || 'Non d√©finie'}`)
      console.log(`   Moyens de paiement: ${currentProfile.payment_methods || 'Non d√©finis'}`)
    }

    // 3. Test de sauvegarde avec le champ bio
    console.log('\nüíæ TEST DE SAUVEGARDE AVEC CHAMP BIO:')
    
    const testData = {
      bio: 'V√©t√©rinaire exp√©riment√© avec 10 ans d\'exp√©rience dans le soin des √©quid√©s. Sp√©cialis√© dans la m√©decine pr√©ventive et les urgences.',
      experience_years: 10,
      price_range: '‚Ç¨‚Ç¨‚Ç¨',
      payment_methods: ['CB', 'Esp√®ces', 'Ch√®que', 'Virement']
    }

    try {
      const { error: updateError } = await supabase
        .from('pro_profiles')
        .update(testData)
        .eq('user_id', authData.user.id)

      if (updateError) {
        console.log(`‚ùå Erreur sauvegarde: ${updateError.message}`)
        console.log('üí° V√©rifier que les colonnes ont √©t√© ajout√©es')
        return
      } else {
        console.log('‚úÖ Sauvegarde r√©ussie avec champ bio')
        console.log(`   Bio: ${testData.bio}`)
        console.log(`   Exp√©rience: ${testData.experience_years} ans`)
        console.log(`   Gamme de prix: ${testData.price_range}`)
        console.log(`   Moyens de paiement: ${testData.payment_methods.join(', ')}`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue sauvegarde: ${error.message}`)
      return
    }

    // 4. V√©rifier la sauvegarde
    console.log('\nüìñ V√âRIFICATION DE LA SAUVEGARDE:')
    
    const { data: savedProfile, error: savedError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, payment_methods, nom, prenom')
      .eq('user_id', authData.user.id)
      .single()

    if (savedError) {
      console.log(`‚ùå Erreur lecture profil sauvegard√©: ${savedError.message}`)
    } else {
      console.log('‚úÖ Profil sauvegard√© v√©rifi√©:')
      console.log(`   Nom: ${savedProfile.nom} ${savedProfile.prenom}`)
      console.log(`   Bio: ${savedProfile.bio}`)
      console.log(`   Exp√©rience: ${savedProfile.experience_years} ans`)
      console.log(`   Gamme de prix: ${savedProfile.price_range}`)
      console.log(`   Moyens de paiement: ${savedProfile.payment_methods}`)
      
      // V√©rifier que les donn√©es correspondent
      if (savedProfile.bio === testData.bio && 
          savedProfile.experience_years === testData.experience_years &&
          savedProfile.price_range === testData.price_range) {
        console.log('‚úÖ Toutes les donn√©es ont √©t√© sauvegard√©es correctement')
      } else {
        console.log('‚ö†Ô∏è  Certaines donn√©es ne correspondent pas')
      }
    }

    // 5. Test de mise √† jour partielle (simuler l'√©dition du profil)
    console.log('\nüîÑ TEST DE MISE √Ä JOUR PARTIELLE:')
    
    const partialUpdate = {
      bio: 'V√©t√©rinaire sp√©cialis√© dans les √©quid√©s avec 15 ans d\'exp√©rience. Expert en m√©decine pr√©ventive.',
      experience_years: 15
    }

    try {
      const { error: partialError } = await supabase
        .from('pro_profiles')
        .update(partialUpdate)
        .eq('user_id', authData.user.id)

      if (partialError) {
        console.log(`‚ùå Erreur mise √† jour partielle: ${partialError.message}`)
      } else {
        console.log('‚úÖ Mise √† jour partielle r√©ussie')
        console.log(`   Nouvelle bio: ${partialUpdate.bio}`)
        console.log(`   Nouvelle exp√©rience: ${partialUpdate.experience_years} ans`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue mise √† jour partielle: ${error.message}`)
    }

    // 6. V√©rification finale
    console.log('\nüìä V√âRIFICATION FINALE:')
    
    const { data: finalProfile, error: finalError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, payment_methods')
      .eq('user_id', authData.user.id)
      .single()

    if (finalError) {
      console.log(`‚ùå Erreur v√©rification finale: ${finalError.message}`)
    } else {
      console.log('‚úÖ Profil final:')
      console.log(`   Bio: ${finalProfile.bio}`)
      console.log(`   Exp√©rience: ${finalProfile.experience_years} ans`)
      console.log(`   Gamme de prix: ${finalProfile.price_range}`)
      console.log(`   Moyens de paiement: ${finalProfile.payment_methods}`)
    }

    // 7. D√©connexion
    console.log('\nüîí D√âCONNEXION:')
    const { error: signOutError } = await supabase.auth.signOut()
    if (signOutError) {
      console.log(`‚ö†Ô∏è  Erreur d√©connexion: ${signOutError.message}`)
    } else {
      console.log('‚úÖ Utilisateur d√©connect√©')
    }

    console.log('\nüéâ TEST TERMIN√â !')
    console.log('üìã R√©sum√©:')
    console.log('   ‚úÖ Connexion utilisateur r√©ussie')
    console.log('   ‚úÖ Lecture du profil fonctionnelle')
    console.log('   ‚úÖ Sauvegarde avec champ bio r√©ussie')
    console.log('   ‚úÖ Mise √† jour partielle fonctionnelle')
    console.log('   ‚úÖ Persistance en BDD confirm√©e')

    console.log('\nüí° INSTRUCTIONS POUR L\'UTILISATEUR:')
    console.log('   1. Ex√©cuter le script add-missing-columns-pro-profiles.sql dans Supabase')
    console.log('   2. Recharger l\'application')
    console.log('   3. Aller dans "Mon profil" (c√¥t√© pro)')
    console.log('   4. Tester l\'√©dition et la sauvegarde du champ bio')
    console.log('   5. La sauvegarde devrait maintenant fonctionner sans erreur !')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testBioSave()
