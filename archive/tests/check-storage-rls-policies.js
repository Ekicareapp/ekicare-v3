#!/usr/bin/env node

/**
 * üîç V√âRIFICATION DES POLICIES RLS SUPABASE STORAGE
 * V√©rifie les policies RLS des buckets de stockage
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkStorageRLSPolicies() {
  console.log('üîç V√âRIFICATION DES POLICIES RLS SUPABASE STORAGE')
  console.log('================================================')

  try {
    // 1. V√©rifier les buckets existants
    console.log('\nüì¶ BUCKETS EXISTANTS:')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()

    if (bucketsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketsError)
      return
    }

    const bucketNames = buckets?.map(b => b.name) || []
    console.log(`   Buckets trouv√©s: ${bucketNames.join(', ')}`)

    // 2. V√©rifier les policies RLS pour chaque bucket
    console.log('\nüîê POLICIES RLS DES BUCKETS:')
    
    for (const bucket of buckets || []) {
      console.log(`\nüìã Bucket: ${bucket.name}`)
      console.log(`   Public: ${bucket.public ? '‚úÖ OUI' : '‚ùå NON'}`)
      
      // Note: L'API Supabase ne permet pas de lister directement les policies RLS
      // Nous devons les v√©rifier via des tests d'upload
      console.log('   ‚ö†Ô∏è  Policies RLS √† v√©rifier via tests d\'upload')
    }

    // 3. Tester l'upload avec un utilisateur authentifi√©
    console.log('\nüß™ TEST D\'UPLOAD AVEC UTILISATEUR AUTHENTIFI√â:')
    
    // R√©cup√©rer un utilisateur existant
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, role')
      .limit(1)

    if (usersError || !users || users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© pour le test')
      return
    }

    const testUser = users[0]
    console.log(`   Utilisateur de test: ${testUser.email} (${testUser.role})`)

    // Cr√©er une image de test
    const testImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, // RGB, no compression
      0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, // IDAT chunk
      0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, // IEND chunk
      0x60, 0x82
    ])
    
    const testFile = new File([testImageBuffer], 'test-profile.png', { type: 'image/png' })

    // Tester l'upload vers chaque bucket
    const bucketsToTest = ['avatars', 'proprio_photos', 'pro_photo']
    
    for (const bucketName of bucketsToTest) {
      if (!bucketNames.includes(bucketName)) {
        console.log(`   ‚ö†Ô∏è  Bucket ${bucketName} n'existe pas`)
        continue
      }

      console.log(`\n   üì§ Test upload vers ${bucketName}:`)
      const filePath = `${testUser.id}/profile.jpg`
      
      try {
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from(bucketName)
          .upload(filePath, testFile, {
            cacheControl: '3600',
            upsert: true
          })

        if (uploadError) {
          console.log(`   ‚ùå Erreur: ${uploadError.message}`)
          
          // Analyser le type d'erreur
          if (uploadError.message.includes('row-level security policy')) {
            console.log(`   üîç Probl√®me RLS d√©tect√© pour ${bucketName}`)
          } else if (uploadError.message.includes('not found')) {
            console.log(`   üîç Bucket ${bucketName} non accessible`)
          }
        } else {
          console.log(`   ‚úÖ Upload r√©ussi vers ${bucketName}`)
          
          // Tester la lecture
          const { data: urlData } = supabase.storage
            .from(bucketName)
            .getPublicUrl(filePath)
          console.log(`   üîó URL publique: ${urlData.publicUrl}`)
          
          // Nettoyer
          await supabase.storage
            .from(bucketName)
            .remove([filePath])
          console.log(`   üßπ Fichier de test supprim√©`)
        }
      } catch (error) {
        console.log(`   ‚ùå Erreur inattendue: ${error.message}`)
      }
    }

    // 4. Recommandations
    console.log('\nüí° RECOMMANDATIONS:')
    console.log('   1. Configurer les policies RLS dans le dashboard Supabase')
    console.log('   2. Policies n√©cessaires:')
    console.log('      - SELECT: Lecture publique pour tous')
    console.log('      - INSERT: Upload autoris√© pour auth.uid()')
    console.log('      - UPDATE: Modification autoris√©e pour auth.uid()')
    console.log('      - DELETE: Suppression autoris√©e pour auth.uid()')
    console.log('   3. Structure de chemin: {bucket}/{user_id}/profile.jpg')

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  }
}

// Ex√©cuter la v√©rification
checkStorageRLSPolicies()
