#!/usr/bin/env node

/**
 * üß™ TEST FONCTIONNALIT√â UPSERT
 * Teste l'upsert apr√®s ajout de la contrainte unique sur user_id
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase (client avec cl√© anonyme)
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testUpsertFunctionality() {
  console.log('üß™ TEST FONCTIONNALIT√â UPSERT')
  console.log('=============================')

  try {
    // 1. Connexion avec un utilisateur professionnel
    console.log('\nüîê CONNEXION UTILISATEUR PROFESSIONNEL:')
    const email = 'pro.ekicare@ekicare.com'
    const password = 'TestPassword123!'
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email,
      password
    })

    if (authError) {
      console.error('‚ùå Erreur de connexion:', authError.message)
      return
    }

    console.log(`‚úÖ Utilisateur connect√©: ${authData.user.email}`)
    console.log(`   ID: ${authData.user.id}`)

    // 2. V√©rifier l'√©tat initial du profil
    console.log('\nüìä √âTAT INITIAL DU PROFIL:')
    const { data: initialProfile, error: initialError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, nom, prenom')
      .eq('user_id', authData.user.id)
      .single()

    if (initialError) {
      console.log(`‚ùå Erreur lecture profil initial: ${initialError.message}`)
    } else {
      console.log(`‚úÖ Profil initial:`)
      console.log(`   Nom: ${initialProfile.nom} ${initialProfile.prenom}`)
      console.log(`   Bio: ${initialProfile.bio || 'Aucune'}`)
      console.log(`   Exp√©rience: ${initialProfile.experience_years || 'Non d√©finie'} ans`)
      console.log(`   Gamme de prix: ${initialProfile.price_range || 'Non d√©finie'}`)
    }

    // 3. Test d'upsert (simulation du code frontend)
    console.log('\nüíæ TEST D\'UPSERT (SIMULATION CODE FRONTEND):')
    
    const profileData = {
      telephone: '+33123456789',
      profession: 'V√©t√©rinaire',
      ville_nom: 'Paris',
      rayon_km: 50,
      siret: '12345678901234',
      bio: 'V√©t√©rinaire sp√©cialis√© dans les √©quid√©s avec 15 ans d\'exp√©rience. Expert en m√©decine pr√©ventive et urgences.',
      payment_methods: ['CB', 'Esp√®ces', 'Ch√®que', 'Virement'],
      price_range: '‚Ç¨‚Ç¨‚Ç¨',
      experience_years: 15
    };

    try {
      const { data: upsertData, error: upsertError } = await supabase
        .from('pro_profiles')
        .upsert({
          user_id: authData.user.id,
          ...profileData
        }, {
          onConflict: 'user_id'
        })

      if (upsertError) {
        console.log(`‚ùå Erreur upsert: ${upsertError.message}`)
        
        if (upsertError.message.includes('no unique or exclusion constraint')) {
          console.log('üîç Probl√®me: La contrainte unique sur user_id n\'a pas √©t√© ajout√©e')
          console.log('üí° Solution: Ex√©cuter le script fix-upsert-constraints.sql')
          return
        }
      } else {
        console.log('‚úÖ Upsert r√©ussi')
        console.log(`   Donn√©es upsert√©es: ${JSON.stringify(upsertData)}`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue upsert: ${error.message}`)
      return
    }

    // 4. V√©rifier que les donn√©es ont √©t√© sauvegard√©es
    console.log('\nüìñ V√âRIFICATION DES DONN√âES UPSERT√âES:')
    
    const { data: savedProfile, error: savedError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, payment_methods, nom, prenom')
      .eq('user_id', authData.user.id)
      .single()

    if (savedError) {
      console.log(`‚ùå Erreur lecture profil sauvegard√©: ${savedError.message}`)
    } else {
      console.log('‚úÖ Profil sauvegard√© v√©rifi√©:')
      console.log(`   Nom: ${savedProfile.nom} ${savedProfile.prenom}`)
      console.log(`   Bio: ${savedProfile.bio}`)
      console.log(`   Exp√©rience: ${savedProfile.experience_years} ans`)
      console.log(`   Gamme de prix: ${savedProfile.price_range}`)
      console.log(`   Moyens de paiement: ${savedProfile.payment_methods}`)
      
      // V√©rifier que les donn√©es correspondent
      if (savedProfile.bio === profileData.bio && 
          savedProfile.experience_years === profileData.experience_years &&
          savedProfile.price_range === profileData.price_range) {
        console.log('‚úÖ Toutes les donn√©es ont √©t√© upsert√©es correctement')
      } else {
        console.log('‚ö†Ô∏è  Certaines donn√©es ne correspondent pas')
      }
    }

    // 5. Test de mise √† jour (deuxi√®me upsert)
    console.log('\nüîÑ TEST DE MISE √Ä JOUR (DEUXI√àME UPSERT):')
    
    const updatedProfileData = {
      bio: 'V√©t√©rinaire expert avec 20 ans d\'exp√©rience. Sp√©cialis√© dans la chirurgie √©quine.',
      experience_years: 20,
      price_range: '‚Ç¨‚Ç¨‚Ç¨‚Ç¨'
    };

    try {
      const { data: updateData, error: updateError } = await supabase
        .from('pro_profiles')
        .upsert({
          user_id: authData.user.id,
          ...updatedProfileData
        }, {
          onConflict: 'user_id'
        })

      if (updateError) {
        console.log(`‚ùå Erreur mise √† jour: ${updateError.message}`)
      } else {
        console.log('‚úÖ Mise √† jour r√©ussie')
        console.log(`   Donn√©es mises √† jour: ${JSON.stringify(updateData)}`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue mise √† jour: ${error.message}`)
    }

    // 6. V√©rification finale
    console.log('\nüìä V√âRIFICATION FINALE:')
    
    const { data: finalProfile, error: finalError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range')
      .eq('user_id', authData.user.id)
      .single()

    if (finalError) {
      console.log(`‚ùå Erreur v√©rification finale: ${finalError.message}`)
    } else {
      console.log('‚úÖ Profil final:')
      console.log(`   Bio: ${finalProfile.bio}`)
      console.log(`   Exp√©rience: ${finalProfile.experience_years} ans`)
      console.log(`   Gamme de prix: ${finalProfile.price_range}`)
      
      // V√©rifier que la mise √† jour a fonctionn√©
      if (finalProfile.bio === updatedProfileData.bio && 
          finalProfile.experience_years === updatedProfileData.experience_years) {
        console.log('‚úÖ La mise √† jour a fonctionn√© correctement')
      } else {
        console.log('‚ö†Ô∏è  La mise √† jour n\'a pas fonctionn√© comme attendu')
      }
    }

    // 7. D√©connexion
    console.log('\nüîí D√âCONNEXION:')
    const { error: signOutError } = await supabase.auth.signOut()
    if (signOutError) {
      console.log(`‚ö†Ô∏è  Erreur d√©connexion: ${signOutError.message}`)
    } else {
      console.log('‚úÖ Utilisateur d√©connect√©')
    }

    console.log('\nüéâ TEST TERMIN√â !')
    console.log('üìã R√©sum√©:')
    console.log('   ‚úÖ Connexion utilisateur r√©ussie')
    console.log('   ‚úÖ Upsert fonctionnel (avec contrainte unique)')
    console.log('   ‚úÖ Mise √† jour fonctionnelle')
    console.log('   ‚úÖ Plus d\'erreur "no unique or exclusion constraint"')

    console.log('\nüí° INSTRUCTIONS POUR L\'UTILISATEUR:')
    console.log('   1. Ex√©cuter le script fix-upsert-constraints.sql dans Supabase')
    console.log('   2. Recharger l\'application')
    console.log('   3. Aller dans "Mon profil" (c√¥t√© pro)')
    console.log('   4. Tester l\'enregistrement du profil')
    console.log('   5. L\'upsert devrait maintenant fonctionner sans erreur !')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testUpsertFunctionality()
