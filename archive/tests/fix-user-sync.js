#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

// Configuration avec la cl√© service
const supabaseUrl = 'https://krxujhjpzmknxpjhqfbx.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseServiceKey) {
  console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixUserSync() {
  console.log('üîß Synchronisation de l\'utilisateur...\n');

  try {
    // 1. R√©cup√©rer l'utilisateur de auth.users
    console.log('1. R√©cup√©ration de l\'utilisateur de auth.users...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur auth:', authError);
      return;
    }

    const user = authUsers.users.find(u => u.email === 'tibereecom@gmail.com');
    if (!user) {
      console.error('‚ùå Utilisateur non trouv√© dans auth.users');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:', user.email, user.id);

    // 2. V√©rifier s'il existe dans public.users
    console.log('2. V√©rification dans public.users...');
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('id')
      .eq('id', user.id)
      .single();

    if (existingUser) {
      console.log('‚úÖ Utilisateur d√©j√† dans public.users');
      return;
    }

    if (checkError && checkError.code !== 'PGRST116') {
      console.error('‚ùå Erreur de v√©rification:', checkError);
      return;
    }

    // 3. Ajouter √† public.users
    console.log('3. Ajout √† public.users...');
    const { error: insertError } = await supabase
      .from('users')
      .insert([{
        id: user.id,
        email: user.email,
        role: 'PROPRIETAIRE',
        created_at: user.created_at,
        updated_at: user.updated_at
      }]);

    if (insertError) {
      console.error('‚ùå Erreur d\'insertion:', insertError);
      return;
    }

    console.log('‚úÖ Utilisateur ajout√© √† public.users');

    // 4. Ajouter le profil propri√©taire
    console.log('4. Ajout du profil propri√©taire...');
    const { error: profileError } = await supabase
      .from('proprio_profiles')
      .insert([{
        user_id: user.id,
        prenom: 'Test',
        nom: 'User',
        telephone: '0612345678',
        adresse: '123 Rue Test'
      }]);

    if (profileError) {
      console.error('‚ùå Erreur profil:', profileError);
    } else {
      console.log('‚úÖ Profil propri√©taire ajout√©');
    }

    console.log('\nüéâ Synchronisation termin√©e !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

if (require.main === module) {
  fixUserSync().catch(console.error);
}
