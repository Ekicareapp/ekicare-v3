#!/usr/bin/env node

/**
 * üß™ TEST SAUVEGARDE PROFIL AVEC PHOTO
 * Teste la sauvegarde du profil apr√®s suppression de la r√©f√©rence updated_at
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase (client avec cl√© anonyme)
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function testProfileSaveWithPhoto() {
  console.log('üß™ TEST SAUVEGARDE PROFIL AVEC PHOTO')
  console.log('====================================')

  try {
    // 1. Connexion avec un utilisateur professionnel
    console.log('\nüîê CONNEXION UTILISATEUR PROFESSIONNEL:')
    const email = 'pro.ekicare@ekicare.com'
    const password = 'TestPassword123!'
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email,
      password
    })

    if (authError) {
      console.error('‚ùå Erreur de connexion:', authError.message)
      return
    }

    console.log(`‚úÖ Utilisateur connect√©: ${authData.user.email}`)
    console.log(`   ID: ${authData.user.id}`)

    // 2. Test d'upload de photo (simulation)
    console.log('\nüì§ TEST D\'UPLOAD DE PHOTO:')
    
    const testImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, // RGB, no compression
      0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, // IDAT chunk
      0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, // IEND chunk
      0x60, 0x82
    ])
    
    const testFile = new File([testImageBuffer], 'test-profile.png', { type: 'image/png' })
    const filePath = `${authData.user.id}/profile.jpg`
    
    try {
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('pro_photo')
        .upload(filePath, testFile, {
          cacheControl: '3600',
          upsert: true
        })

      if (uploadError) {
        console.log(`‚ùå Erreur upload: ${uploadError.message}`)
        return
      } else {
        console.log(`‚úÖ Upload de photo r√©ussi`)
        console.log(`   Chemin: ${uploadData.path}`)
        
        // R√©cup√©rer l'URL publique avec cache buster
        const { data: urlData } = supabase.storage
          .from('pro_photo')
          .getPublicUrl(filePath)
        const urlWithCacheBuster = `${urlData.publicUrl}?t=${Date.now()}`
        console.log(`   URL: ${urlWithCacheBuster}`)
        
        // 3. Test de sauvegarde du profil (simulation du code frontend)
        console.log('\nüíæ TEST DE SAUVEGARDE DU PROFIL:')
        
        const profileData = {
          telephone: '+33123456789',
          profession: 'V√©t√©rinaire',
          ville_nom: 'Paris',
          rayon_km: 50,
          siret: '12345678901234',
          bio: 'V√©t√©rinaire sp√©cialis√© dans les √©quid√©s avec 15 ans d\'exp√©rience. Expert en m√©decine pr√©ventive et urgences.',
          payment_methods: ['CB', 'Esp√®ces', 'Ch√®que', 'Virement'],
          price_range: '‚Ç¨‚Ç¨‚Ç¨',
          experience_years: 15,
          photo_url: urlWithCacheBuster
        };

        try {
          const { error: updateError } = await supabase
            .from('pro_profiles')
            .update(profileData)
            .eq('user_id', authData.user.id)

          if (updateError) {
            console.log(`‚ùå Erreur sauvegarde profil: ${updateError.message}`)
            return
          } else {
            console.log('‚úÖ Sauvegarde du profil r√©ussie')
            console.log(`   Bio: ${profileData.bio}`)
            console.log(`   Exp√©rience: ${profileData.experience_years} ans`)
            console.log(`   Photo URL: ${profileData.photo_url}`)
          }
        } catch (error) {
          console.log(`‚ùå Erreur inattendue sauvegarde: ${error.message}`)
          return
        }
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue upload: ${error.message}`)
      return
    }

    // 4. V√©rifier la sauvegarde
    console.log('\nüìñ V√âRIFICATION DE LA SAUVEGARDE:')
    
    const { data: savedProfile, error: savedError } = await supabase
      .from('pro_profiles')
      .select('bio, experience_years, price_range, payment_methods, photo_url, nom, prenom')
      .eq('user_id', authData.user.id)
      .single()

    if (savedError) {
      console.log(`‚ùå Erreur lecture profil sauvegard√©: ${savedError.message}`)
    } else {
      console.log('‚úÖ Profil sauvegard√© v√©rifi√©:')
      console.log(`   Nom: ${savedProfile.nom} ${savedProfile.prenom}`)
      console.log(`   Bio: ${savedProfile.bio}`)
      console.log(`   Exp√©rience: ${savedProfile.experience_years} ans`)
      console.log(`   Photo URL: ${savedProfile.photo_url}`)
      
      // V√©rifier que les donn√©es correspondent
      if (savedProfile.bio === profileData.bio && 
          savedProfile.experience_years === profileData.experience_years &&
          savedProfile.photo_url === profileData.photo_url) {
        console.log('‚úÖ Toutes les donn√©es ont √©t√© sauvegard√©es correctement')
      } else {
        console.log('‚ö†Ô∏è  Certaines donn√©es ne correspondent pas')
      }
    }

    // 5. Test de remplacement de photo
    console.log('\nüîÑ TEST DE REMPLACEMENT DE PHOTO:')
    
    // Cr√©er une nouvelle image de test
    const newImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, // RGB, no compression
      0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, // IDAT chunk
      0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, // IEND chunk
      0x60, 0x82
    ])
    
    const newTestFile = new File([newImageBuffer], 'test-profile-new.png', { type: 'image/png' })
    
    try {
      // Upload de la nouvelle photo
      const { data: newUploadData, error: newUploadError } = await supabase.storage
        .from('pro_photo')
        .upload(filePath, newTestFile, {
          cacheControl: '3600',
          upsert: true
        })

      if (newUploadError) {
        console.log(`‚ùå Erreur upload nouvelle photo: ${newUploadError.message}`)
      } else {
        console.log(`‚úÖ Nouvelle photo upload√©e`)
        
        // R√©cup√©rer la nouvelle URL
        const { data: newUrlData } = supabase.storage
          .from('pro_photo')
          .getPublicUrl(filePath)
        const newUrlWithCacheBuster = `${newUrlData.publicUrl}?t=${Date.now()}`
        
        // Mettre √† jour le profil avec la nouvelle photo
        const { error: photoUpdateError } = await supabase
          .from('pro_profiles')
          .update({ photo_url: newUrlWithCacheBuster })
          .eq('user_id', authData.user.id)

        if (photoUpdateError) {
          console.log(`‚ùå Erreur mise √† jour photo: ${photoUpdateError.message}`)
        } else {
          console.log('‚úÖ Photo remplac√©e avec succ√®s')
          console.log(`   Nouvelle URL: ${newUrlWithCacheBuster}`)
        }
      }
    } catch (error) {
      console.log(`‚ùå Erreur inattendue remplacement: ${error.message}`)
    }

    // 6. Nettoyage
    console.log('\nüßπ NETTOYAGE:')
    
    try {
      const { error: deleteError } = await supabase.storage
        .from('pro_photo')
        .remove([filePath])

      if (deleteError) {
        console.log(`‚ö†Ô∏è  Erreur suppression: ${deleteError.message}`)
      } else {
        console.log('‚úÖ Fichier de test supprim√©')
      }
      
      // Supprimer l'URL du profil
      const { error: clearError } = await supabase
        .from('pro_profiles')
        .update({ photo_url: null })
        .eq('user_id', authData.user.id)

      if (clearError) {
        console.log(`‚ö†Ô∏è  Erreur suppression URL: ${clearError.message}`)
      } else {
        console.log('‚úÖ URL supprim√©e du profil')
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  Erreur nettoyage: ${error.message}`)
    }

    // 7. D√©connexion
    console.log('\nüîí D√âCONNEXION:')
    const { error: signOutError } = await supabase.auth.signOut()
    if (signOutError) {
      console.log(`‚ö†Ô∏è  Erreur d√©connexion: ${signOutError.message}`)
    } else {
      console.log('‚úÖ Utilisateur d√©connect√©')
    }

    console.log('\nüéâ TEST TERMIN√â !')
    console.log('üìã R√©sum√©:')
    console.log('   ‚úÖ Upload de photo fonctionnel')
    console.log('   ‚úÖ Sauvegarde du profil r√©ussie (sans updated_at)')
    console.log('   ‚úÖ Remplacement de photo fonctionnel')
    console.log('   ‚úÖ Plus d\'erreur "Could not find updated_at column"')

    console.log('\nüí° INSTRUCTIONS POUR L\'UTILISATEUR:')
    console.log('   1. Recharger l\'application')
    console.log('   2. Aller dans "Mon profil" (c√¥t√© pro)')
    console.log('   3. Tester le remplacement de photo')
    console.log('   4. Cliquer sur "Enregistrer"')
    console.log('   5. La sauvegarde devrait maintenant fonctionner sans erreur !')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testProfileSaveWithPhoto()
