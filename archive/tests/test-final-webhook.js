#!/usr/bin/env node

/**
 * Script de test final du webhook Stripe
 * V√©rifie que tout fonctionne apr√®s correction
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

async function testFinalWebhook() {
  console.log('üéØ Test Final du Webhook Stripe\n')

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )

  const userId = 'e2565c4c-1b49-4cac-8167-65c3333c2433'

  // 1. V√©rifier que l'utilisateur existe
  console.log('1Ô∏è‚É£ V√©rification de l\'utilisateur:')
  const { data: user, error: userError } = await supabase
    .from('users')
    .select('id, email, role')
    .eq('id', userId)
    .single()

  if (userError || !user) {
    console.log('   ‚ùå Utilisateur non trouv√©:', userError?.message)
    return
  }

  console.log('   ‚úÖ Utilisateur trouv√©:', user.email, user.role)

  // 2. V√©rifier le profil pro
  console.log('\n2Ô∏è‚É£ V√©rification du profil pro:')
  const { data: profile, error: profileError } = await supabase
    .from('pro_profiles')
    .select('user_id, is_verified, is_subscribed, prenom, nom')
    .eq('user_id', userId)
    .single()

  if (profileError || !profile) {
    console.log('   ‚ùå Profil pro non trouv√©:', profileError?.message)
    return
  }

  console.log('   ‚úÖ Profil pro trouv√©:', profile.prenom, profile.nom)
  console.log('   üìä Statut actuel:')
  console.log(`      - is_verified: ${profile.is_verified}`)
  console.log(`      - is_subscribed: ${profile.is_subscribed}`)

  // 3. Simuler la mise √† jour du webhook
  console.log('\n3Ô∏è‚É£ Simulation de la mise √† jour webhook:')
  const updateData = {
    is_verified: true,
    is_subscribed: true,
    subscription_start: new Date().toISOString(),
    stripe_customer_id: 'cus_test_webhook',
    stripe_subscription_id: 'sub_test_webhook'
  }

  const { error: updateError } = await supabase
    .from('pro_profiles')
    .update(updateData)
    .eq('user_id', userId)

  if (updateError) {
    console.log('   ‚ùå Erreur mise √† jour:', updateError.message)
    return
  }

  console.log('   ‚úÖ Mise √† jour r√©ussie!')

  // 4. V√©rifier la mise √† jour
  console.log('\n4Ô∏è‚É£ V√©rification de la mise √† jour:')
  const { data: updatedProfile, error: checkError } = await supabase
    .from('pro_profiles')
    .select('user_id, is_verified, is_subscribed, subscription_start, stripe_customer_id')
    .eq('user_id', userId)
    .single()

  if (checkError || !updatedProfile) {
    console.log('   ‚ùå Erreur v√©rification:', checkError?.message)
    return
  }

  console.log('   üìä Nouveau statut:')
  console.log(`      - is_verified: ${updatedProfile.is_verified}`)
  console.log(`      - is_subscribed: ${updatedProfile.is_subscribed}`)
  console.log(`      - subscription_start: ${updatedProfile.subscription_start}`)
  console.log(`      - stripe_customer_id: ${updatedProfile.stripe_customer_id}`)

  // 5. R√©sultat final
  console.log('\n5Ô∏è‚É£ R√©sultat Final:')
  if (updatedProfile.is_verified && updatedProfile.is_subscribed) {
    console.log('   üéâ SUCC√àS: Le webhook fonctionne parfaitement!')
    console.log('   ‚úÖ is_verified = true')
    console.log('   ‚úÖ is_subscribed = true')
    console.log('   ‚úÖ subscription_start renseign√©')
    console.log('   ‚úÖ stripe_customer_id renseign√©')
  } else {
    console.log('   ‚ùå √âCHEC: La mise √† jour n\'a pas fonctionn√©')
  }

  console.log('\nüéØ Instructions pour le test complet:')
  console.log('   1. Allez sur http://localhost:3002/signup')
  console.log('   2. Cr√©ez un compte avec un NOUVEAU email')
  console.log('   3. Effectuez un paiement avec la carte: 4242 4242 4242 4242')
  console.log('   4. V√©rifiez la redirection vers /success-pro')
  console.log('   5. V√©rifiez que is_verified=true et is_subscribed=true dans Supabase')
}

testFinalWebhook().catch(console.error)
