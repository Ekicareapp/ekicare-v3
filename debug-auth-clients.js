// Script de debug pour v√©rifier l'authentification des clients
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Charger les variables d'environnement
require('dotenv').config({ path: path.join(__dirname, '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function debugAuthClients() {
  console.log('üîç Debug de l\'authentification pour les clients');
  console.log('===============================================');

  try {
    // 1. V√©rifier les utilisateurs PRO
    console.log('\n1Ô∏è‚É£ V√©rification des utilisateurs PRO...');
    const { data: pros, error: prosError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'PRO');

    if (prosError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des PROs:', prosError);
      return;
    }

    console.log(`‚úÖ Nombre de PROs trouv√©s: ${pros.length}`);
    pros.forEach((pro, index) => {
      console.log(`  ${index + 1}. ${pro.email} (ID: ${pro.id})`);
    });

    if (pros.length === 0) {
      console.log('‚ùå Aucun PRO trouv√© ! Cr√©ez un compte PRO d\'abord');
      return;
    }

    // 2. V√©rifier les profils PRO
    console.log('\n2Ô∏è‚É£ V√©rification des profils PRO...');
    const { data: proProfiles, error: proProfilesError } = await supabase
      .from('pro_profiles')
      .select('id, user_id, prenom, nom')
      .limit(5);

    if (proProfilesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils PRO:', proProfilesError);
      return;
    }

    console.log(`‚úÖ Nombre de profils PRO trouv√©s: ${proProfiles.length}`);
    proProfiles.forEach((profile, index) => {
      console.log(`  ${index + 1}. ${profile.prenom} ${profile.nom} (ID: ${profile.id}, User: ${profile.user_id})`);
    });

    // 3. V√©rifier les clients existants
    console.log('\n3Ô∏è‚É£ V√©rification des clients existants...');
    const { data: clients, error: clientsError } = await supabase
      .from('mes_clients')
      .select(`
        pro_id,
        proprio_id,
        created_at,
        pro_profiles!inner(prenom, nom),
        proprio_profiles!inner(prenom, nom)
      `);

    if (clientsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des clients:', clientsError);
    } else {
      console.log(`‚úÖ Nombre de clients trouv√©s: ${clients.length}`);
      if (clients.length > 0) {
        clients.forEach((client, index) => {
          console.log(`  ${index + 1}. ${client.pro_profiles.prenom} ${client.pro_profiles.nom} ‚Üí ${client.proprio_profiles.prenom} ${client.proprio_profiles.nom}`);
        });
      } else {
        console.log('‚ÑπÔ∏è  Aucun client trouv√© - c\'est normal si aucun RDV n\'a √©t√© confirm√©');
      }
    }

    // 4. Cr√©er un client de test si n√©cessaire
    if (clients.length === 0) {
      console.log('\n4Ô∏è‚É£ Cr√©ation d\'un client de test...');
      
      // R√©cup√©rer un PRO et un PROPRIO
      const pro = proProfiles[0];
      const { data: proprios, error: propriosError } = await supabase
        .from('proprio_profiles')
        .select('id, prenom, nom')
        .limit(1);

      if (propriosError || !proprios || proprios.length === 0) {
        console.log('‚ùå Aucun PROPRIO trouv√© pour cr√©er un client de test');
        return;
      }

      const proprio = proprios[0];
      
      // Cr√©er la relation
      const { data: newClient, error: createError } = await supabase
        .from('mes_clients')
        .insert({
          pro_id: pro.id,
          proprio_id: proprio.id,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select();

      if (createError) {
        console.error('‚ùå Erreur lors de la cr√©ation du client de test:', createError);
      } else {
        console.log('‚úÖ Client de test cr√©√© avec succ√®s !');
        console.log(`   ${pro.prenom} ${pro.nom} ‚Üí ${proprio.prenom} ${proprio.nom}`);
      }
    }

    console.log('\n‚úÖ Debug termin√©');
    console.log('\nüí° Instructions pour tester:');
    console.log('1. Connectez-vous en tant que PRO dans le navigateur');
    console.log('2. Allez dans "Mes clients"');
    console.log('3. Si l\'erreur persiste, v√©rifiez la console du navigateur (F12)');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

debugAuthClients();












