#!/usr/bin/env node

/**
 * üîê CONFIGURATION DES POLICIES RLS SUPABASE STORAGE
 * Configure les policies RLS pour les buckets de photos de profil
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function setupStorageRLSPolicies() {
  console.log('üîê CONFIGURATION DES POLICIES RLS SUPABASE STORAGE')
  console.log('=================================================')

  try {
    // 1. V√©rifier les buckets existants
    console.log('\nüì¶ BUCKETS EXISTANTS:')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()

    if (bucketsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketsError)
      return
    }

    const bucketNames = buckets?.map(b => b.name) || []
    console.log(`   Buckets trouv√©s: ${bucketNames.join(', ')}`)

    // 2. Cr√©er les policies RLS pour chaque bucket de photos
    const photoBuckets = ['avatars', 'proprio_photos', 'pro_photo']
    
    for (const bucketName of photoBuckets) {
      if (!bucketNames.includes(bucketName)) {
        console.log(`\n‚ö†Ô∏è  Bucket ${bucketName} n'existe pas, ignor√©`)
        continue
      }

      console.log(`\nüîß CONFIGURATION DES POLICIES POUR ${bucketName.toUpperCase()}:`)

      // Policy pour la lecture (SELECT) - Lecture publique
      console.log('   üìñ Configuration de la policy SELECT...')
      try {
        const { error: selectError } = await supabase.rpc('exec', {
          sql: `
            CREATE POLICY IF NOT EXISTS "Public read access for ${bucketName}" 
            ON storage.objects FOR SELECT 
            USING (bucket_id = '${bucketName}');
          `
        })

        if (selectError) {
          console.log(`   ‚ö†Ô∏è  Policy SELECT d√©j√† existante ou erreur: ${selectError.message}`)
        } else {
          console.log('   ‚úÖ Policy SELECT cr√©√©e')
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erreur policy SELECT: ${error.message}`)
      }

      // Policy pour l'upload (INSERT) - Upload autoris√© pour l'utilisateur authentifi√©
      console.log('   üì§ Configuration de la policy INSERT...')
      try {
        const { error: insertError } = await supabase.rpc('exec', {
          sql: `
            CREATE POLICY IF NOT EXISTS "Users can upload to ${bucketName}" 
            ON storage.objects FOR INSERT 
            WITH CHECK (
              bucket_id = '${bucketName}' AND 
              auth.role() = 'authenticated' AND
              auth.uid()::text = (storage.foldername(name))[1]
            );
          `
        })

        if (insertError) {
          console.log(`   ‚ö†Ô∏è  Policy INSERT d√©j√† existante ou erreur: ${insertError.message}`)
        } else {
          console.log('   ‚úÖ Policy INSERT cr√©√©e')
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erreur policy INSERT: ${error.message}`)
      }

      // Policy pour la mise √† jour (UPDATE) - Modification autoris√©e pour l'utilisateur
      console.log('   üîÑ Configuration de la policy UPDATE...')
      try {
        const { error: updateError } = await supabase.rpc('exec', {
          sql: `
            CREATE POLICY IF NOT EXISTS "Users can update in ${bucketName}" 
            ON storage.objects FOR UPDATE 
            USING (
              bucket_id = '${bucketName}' AND 
              auth.role() = 'authenticated' AND
              auth.uid()::text = (storage.foldername(name))[1]
            );
          `
        })

        if (updateError) {
          console.log(`   ‚ö†Ô∏è  Policy UPDATE d√©j√† existante ou erreur: ${updateError.message}`)
        } else {
          console.log('   ‚úÖ Policy UPDATE cr√©√©e')
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erreur policy UPDATE: ${error.message}`)
      }

      // Policy pour la suppression (DELETE) - Suppression autoris√©e pour l'utilisateur
      console.log('   üóëÔ∏è  Configuration de la policy DELETE...')
      try {
        const { error: deleteError } = await supabase.rpc('exec', {
          sql: `
            CREATE POLICY IF NOT EXISTS "Users can delete from ${bucketName}" 
            ON storage.objects FOR DELETE 
            USING (
              bucket_id = '${bucketName}' AND 
              auth.role() = 'authenticated' AND
              auth.uid()::text = (storage.foldername(name))[1]
            );
          `
        })

        if (deleteError) {
          console.log(`   ‚ö†Ô∏è  Policy DELETE d√©j√† existante ou erreur: ${deleteError.message}`)
        } else {
          console.log('   ‚úÖ Policy DELETE cr√©√©e')
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erreur policy DELETE: ${error.message}`)
      }
    }

    // 3. Tester les policies avec un upload
    console.log('\nüß™ TEST DES POLICIES AVEC UPLOAD:')
    
    // R√©cup√©rer un utilisateur existant
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, role')
      .limit(1)

    if (usersError || !users || users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© pour le test')
      return
    }

    const testUser = users[0]
    console.log(`   Utilisateur de test: ${testUser.email} (${testUser.role})`)

    // Cr√©er une image de test
    const testImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, // RGB, no compression
      0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, // IDAT chunk
      0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, // IEND chunk
      0x60, 0x82
    ])
    
    const testFile = new File([testImageBuffer], 'test-profile.png', { type: 'image/png' })

    // Tester l'upload vers avatars
    console.log('\n   üì§ Test upload vers avatars:')
    const filePath = `${testUser.id}/profile.jpg`
    
    try {
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, testFile, {
          cacheControl: '3600',
          upsert: true
        })

      if (uploadError) {
        console.log(`   ‚ùå Erreur upload: ${uploadError.message}`)
      } else {
        console.log('   ‚úÖ Upload r√©ussi')
        
        // Tester la lecture
        const { data: urlData } = supabase.storage
          .from('avatars')
          .getPublicUrl(filePath)
        console.log(`   üîó URL publique: ${urlData.publicUrl}`)
        
        // Nettoyer
        await supabase.storage
          .from('avatars')
          .remove([filePath])
        console.log('   üßπ Fichier de test supprim√©')
      }
    } catch (error) {
      console.log(`   ‚ùå Erreur inattendue: ${error.message}`)
    }

    console.log('\nüéâ CONFIGURATION DES POLICIES TERMIN√âE !')
    console.log('üìã R√©sum√©:')
    console.log('   - Policies RLS configur√©es pour tous les buckets de photos')
    console.log('   - Lecture publique autoris√©e')
    console.log('   - Upload/modification/suppression autoris√©s pour les utilisateurs authentifi√©s')
    console.log('   - Structure de chemin: {bucket}/{user_id}/profile.jpg')

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
  }
}

// Ex√©cuter la configuration
setupStorageRLSPolicies()
