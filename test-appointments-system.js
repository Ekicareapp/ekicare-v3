#!/usr/bin/env node

/**
 * Script de test complet du syst√®me de rendez-vous
 * Teste toutes les fonctionnalit√©s : cr√©ation, gestion, statuts, compte-rendus
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Donn√©es de test
const testData = {
  proUserId: 'a264da52-368c-4b30-8607-e99f54f2e673', // Pro existant
  proprioUserId: '0da35f5a-6e28-4217-a1f4-05ed6deec488', // Proprio existant
  equideIds: ['test-equide-1', 'test-equide-2'] // IDs d'√©quid√©s de test
};

async function testAppointmentsSystem() {
  console.log('üß™ Test complet du syst√®me de rendez-vous\n');

  try {
    // 1. V√©rifier la structure de la table
    console.log('1Ô∏è‚É£ V√©rification de la structure de la table...');
    const { data: structure, error: structureError } = await supabase
      .from('appointments')
      .select('*')
      .limit(1);
    
    if (structureError) {
      console.log('‚ùå Table appointments non accessible:', structureError.message);
      return;
    }
    console.log('‚úÖ Table appointments accessible\n');

    // 2. Cr√©er un rendez-vous de test
    console.log('2Ô∏è‚É£ Cr√©ation d\'un rendez-vous de test...');
    const appointmentData = {
      pro_id: testData.proUserId,
      proprio_id: testData.proprioUserId,
      equide_ids: testData.equideIds,
      main_slot: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Demain
      alternative_slots: [
        new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(), // Demain + 1h
        new Date(Date.now() + 26 * 60 * 60 * 1000).toISOString()  // Demain + 2h
      ],
      duration_minutes: 60,
      comment: 'Consultation de test pour v√©rifier le syst√®me de rendez-vous',
      status: 'pending'
    };

    const { data: newAppointment, error: createError } = await supabase
      .from('appointments')
      .insert([appointmentData])
      .select()
      .single();

    if (createError) {
      console.log('‚ùå Erreur cr√©ation rendez-vous:', createError.message);
      return;
    }

    console.log('‚úÖ Rendez-vous cr√©√© avec succ√®s');
    console.log('   ID:', newAppointment.id);
    console.log('   Statut:', newAppointment.status);
    console.log('   Date:', newAppointment.main_slot);
    console.log('');

    const appointmentId = newAppointment.id;

    // 3. Tester l'acceptation du rendez-vous
    console.log('3Ô∏è‚É£ Test d\'acceptation du rendez-vous...');
    const { data: acceptedAppointment, error: acceptError } = await supabase
      .from('appointments')
      .update({ status: 'confirmed' })
      .eq('id', appointmentId)
      .select()
      .single();

    if (acceptError) {
      console.log('‚ùå Erreur acceptation:', acceptError.message);
    } else {
      console.log('‚úÖ Rendez-vous accept√© avec succ√®s');
      console.log('   Nouveau statut:', acceptedAppointment.status);
      console.log('');
    }

    // 4. Tester la replanification
    console.log('4Ô∏è‚É£ Test de replanification...');
    const newSlot = new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(); // Apr√®s-demain
    
    const { data: rescheduledAppointment, error: rescheduleError } = await supabase
      .from('appointments')
      .update({ 
        status: 'rescheduled',
        main_slot: newSlot,
        alternative_slots: [
          new Date(Date.now() + 49 * 60 * 60 * 1000).toISOString(),
          new Date(Date.now() + 50 * 60 * 60 * 1000).toISOString()
        ]
      })
      .eq('id', appointmentId)
      .select()
      .single();

    if (rescheduleError) {
      console.log('‚ùå Erreur replanification:', rescheduleError.message);
    } else {
      console.log('‚úÖ Rendez-vous replanifi√© avec succ√®s');
      console.log('   Nouveau statut:', rescheduledAppointment.status);
      console.log('   Nouvelle date:', rescheduledAppointment.main_slot);
      console.log('');
    }

    // 5. Tester l'ajout d'un compte-rendu
    console.log('5Ô∏è‚É£ Test d\'ajout de compte-rendu...');
    const compteRendu = `
Consultation de test r√©alis√©e avec succ√®s.

Observations:
- √âquid√©s en bonne sant√© g√©n√©rale
- Aucun probl√®me d√©tect√©
- Comportement normal

Recommandations:
- Continuer le suivi r√©gulier
- Prochaine consultation dans 6 mois

Notes compl√©mentaires:
- Test du syst√®me de rendez-vous r√©ussi
- Toutes les fonctionnalit√©s op√©rationnelles
`;

    const { data: appointmentWithReport, error: reportError } = await supabase
      .from('appointments')
      .update({ 
        status: 'completed',
        compte_rendu: compteRendu.trim(),
        compte_rendu_updated_at: new Date().toISOString()
      })
      .eq('id', appointmentId)
      .select()
      .single();

    if (reportError) {
      console.log('‚ùå Erreur ajout compte-rendu:', reportError.message);
    } else {
      console.log('‚úÖ Compte-rendu ajout√© avec succ√®s');
      console.log('   Statut final:', appointmentWithReport.status);
      console.log('   Compte-rendu ajout√©:', appointmentWithReport.compte_rendu ? 'Oui' : 'Non');
      console.log('   Date mise √† jour:', appointmentWithReport.compte_rendu_updated_at);
      console.log('');
    }

    // 6. Tester la r√©cup√©ration des rendez-vous par statut
    console.log('6Ô∏è‚É£ Test de r√©cup√©ration par statut...');
    
    const statuses = ['pending', 'confirmed', 'rescheduled', 'completed', 'rejected'];
    for (const status of statuses) {
      const { data: appointments, error: fetchError } = await supabase
        .from('appointments')
        .select('id, status, main_slot, comment')
        .eq('status', status);
      
      if (fetchError) {
        console.log(`‚ùå Erreur r√©cup√©ration ${status}:`, fetchError.message);
      } else {
        console.log(`‚úÖ Statut ${status}: ${appointments.length} rendez-vous`);
      }
    }
    console.log('');

    // 7. Tester les requ√™tes avec jointures
    console.log('7Ô∏è‚É£ Test des requ√™tes avec jointures...');
    
    const { data: appointmentsWithProfiles, error: joinError } = await supabase
      .from('appointments')
      .select(`
        *,
        pro_profiles!appointments_pro_id_fkey (
          prenom,
          nom,
          profession,
          ville_nom
        ),
        proprio_profiles!appointments_proprio_id_fkey (
          prenom,
          nom,
          telephone
        )
      `)
      .eq('id', appointmentId)
      .single();

    if (joinError) {
      console.log('‚ùå Erreur requ√™te avec jointures:', joinError.message);
    } else {
      console.log('‚úÖ Requ√™te avec jointures r√©ussie');
      console.log('   Pro:', appointmentsWithProfiles.pro_profiles?.prenom, appointmentsWithProfiles.pro_profiles?.nom);
      console.log('   Proprio:', appointmentsWithProfiles.proprio_profiles?.prenom, appointmentsWithProfiles.proprio_profiles?.nom);
      console.log('');
    }

    // 8. Test de mise √† jour automatique des statuts
    console.log('8Ô∏è‚É£ Test de mise √† jour automatique...');
    
    // Cr√©er un rendez-vous avec une date pass√©e
    const pastAppointmentData = {
      pro_id: testData.proUserId,
      proprio_id: testData.proprioUserId,
      equide_ids: testData.equideIds,
      main_slot: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // Il y a 2h
      alternative_slots: [],
      duration_minutes: 60,
      comment: 'Rendez-vous pass√© pour test automatique',
      status: 'confirmed'
    };

    const { data: pastAppointment, error: pastError } = await supabase
      .from('appointments')
      .insert([pastAppointmentData])
      .select()
      .single();

    if (pastError) {
      console.log('‚ùå Erreur cr√©ation rendez-vous pass√©:', pastError.message);
    } else {
      console.log('‚úÖ Rendez-vous pass√© cr√©√©');
      
      // Tester la mise √† jour automatique
      const { data: updatedPastAppointment, error: updateError } = await supabase
        .from('appointments')
        .update({ status: 'completed' })
        .eq('id', pastAppointment.id)
        .select()
        .single();

      if (updateError) {
        console.log('‚ùå Erreur mise √† jour automatique:', updateError.message);
      } else {
        console.log('‚úÖ Mise √† jour automatique r√©ussie');
        console.log('   Statut pass√©:', updatedPastAppointment.status);
      }
      console.log('');
    }

    // 9. Nettoyage des donn√©es de test
    console.log('9Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    const { error: deleteError } = await supabase
      .from('appointments')
      .delete()
      .in('id', [appointmentId, pastAppointment?.id].filter(Boolean));

    if (deleteError) {
      console.log('‚ùå Erreur nettoyage:', deleteError.message);
    } else {
      console.log('‚úÖ Donn√©es de test supprim√©es');
      console.log('');
    }

    // 10. R√©sum√© des tests
    console.log('üéâ TESTS TERMIN√âS AVEC SUCC√àS !');
    console.log('');
    console.log('‚úÖ Fonctionnalit√©s test√©es:');
    console.log('   - Cr√©ation de rendez-vous');
    console.log('   - Acceptation de rendez-vous');
    console.log('   - Replanification');
    console.log('   - Ajout de compte-rendu');
    console.log('   - R√©cup√©ration par statut');
    console.log('   - Requ√™tes avec jointures');
    console.log('   - Mise √† jour automatique');
    console.log('   - Nettoyage des donn√©es');
    console.log('');
    console.log('üöÄ Le syst√®me de rendez-vous est op√©rationnel !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Fonction pour tester les APIs
async function testAPIs() {
  console.log('üåê Test des APIs de rendez-vous\n');

  try {
    // Note: Les tests d'API n√©cessitent que le serveur Next.js soit en cours d'ex√©cution
    console.log('‚ö†Ô∏è  Pour tester les APIs, assurez-vous que le serveur Next.js est en cours d\'ex√©cution');
    console.log('   Command: npm run dev');
    console.log('');
    
    console.log('üìã APIs √† tester manuellement:');
    console.log('   - GET  /api/appointments (r√©cup√©ration)');
    console.log('   - POST /api/appointments (cr√©ation)');
    console.log('   - PATCH /api/appointments/[id] (mise √† jour)');
    console.log('   - POST /api/appointments/update-status (mise √† jour automatique)');
    console.log('');
    
    console.log('üîß Utilisez les interfaces:');
    console.log('   - C√¥t√© propri√©taire: /dashboard/proprietaire/recherche-pro');
    console.log('   - C√¥t√© pro: /dashboard/pro/rendez-vous');
    console.log('   - Rendez-vous propri√©taire: /dashboard/proprietaire/rendez-vous');

  } catch (error) {
    console.error('‚ùå Erreur test APIs:', error);
  }
}

// Ex√©cution des tests
async function main() {
  console.log('='.repeat(60));
  console.log('üß™ TEST COMPLET DU SYST√àME DE RENDEZ-VOUS EKICARE');
  console.log('='.repeat(60));
  console.log('');

  await testAppointmentsSystem();
  console.log('');
  await testAPIs();
  
  console.log('');
  console.log('='.repeat(60));
  console.log('‚úÖ TOUS LES TESTS TERMIN√âS');
  console.log('='.repeat(60));
}

main().catch(console.error);
