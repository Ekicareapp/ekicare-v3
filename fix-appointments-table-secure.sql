-- =====================================================
-- SCRIPT S√âCURIS√â POUR LA TABLE APPOINTMENTS
-- =====================================================
-- Ce script v√©rifie d'abord la structure existante
-- et applique seulement les modifications n√©cessaires
-- =====================================================

-- 1. V√âRIFICATION DE LA STRUCTURE EXISTANTE
-- =====================================================

-- V√©rifier si la table appointments existe et sa structure
DO $$
DECLARE
    table_exists boolean;
    column_count integer;
    rec RECORD;
BEGIN
    -- V√©rifier l'existence de la table
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments'
    ) INTO table_exists;
    
    IF table_exists THEN
        RAISE NOTICE '‚úÖ Table appointments existe d√©j√†';
        
        -- Compter les colonnes existantes
        SELECT COUNT(*) INTO column_count
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments';
        
        RAISE NOTICE 'üìä Nombre de colonnes actuelles: %', column_count;
        
        -- Lister les colonnes existantes
        RAISE NOTICE 'üìã Colonnes existantes:';
        FOR rec IN 
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_schema = 'public' 
            AND table_name = 'appointments'
            ORDER BY ordinal_position
        LOOP
            RAISE NOTICE '  - % (%): nullable=%,', rec.column_name, rec.data_type, rec.is_nullable;
        END LOOP;
    ELSE
        RAISE NOTICE '‚ùå Table appointments n''existe pas - cr√©ation n√©cessaire';
    END IF;
END $$;

-- 2. V√âRIFICATION DES TABLES DE R√âF√âRENCE
-- =====================================================

-- V√©rifier que pro_profiles.user_id est bien unique/primary key
DO $$
DECLARE
    pro_user_id_is_pk boolean;
    proprio_user_id_is_pk boolean;
BEGIN
    -- V√©rifier pro_profiles.user_id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
        WHERE tc.table_schema = 'public' 
        AND tc.table_name = 'pro_profiles'
        AND tc.constraint_type = 'PRIMARY KEY'
        AND kcu.column_name = 'user_id'
    ) INTO pro_user_id_is_pk;
    
    -- V√©rifier proprio_profiles.user_id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
        WHERE tc.table_schema = 'public' 
        AND tc.table_name = 'proprio_profiles'
        AND tc.constraint_type = 'PRIMARY KEY'
        AND kcu.column_name = 'user_id'
    ) INTO proprio_user_id_is_pk;
    
    IF pro_user_id_is_pk THEN
        RAISE NOTICE '‚úÖ pro_profiles.user_id est une cl√© primaire';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  pro_profiles.user_id n''est PAS une cl√© primaire - contrainte FK risqu√©e';
    END IF;
    
    IF proprio_user_id_is_pk THEN
        RAISE NOTICE '‚úÖ proprio_profiles.user_id est une cl√© primaire';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  proprio_profiles.user_id n''est PAS une cl√© primaire - contrainte FK risqu√©e';
    END IF;
END $$;

-- 3. CR√âATION/MODIFICATION S√âCURIS√âE DE LA TABLE
-- =====================================================

-- Cr√©er la table seulement si elle n'existe pas
CREATE TABLE IF NOT EXISTS public.appointments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relations (cl√©s √©trang√®res)
    pro_id UUID NOT NULL,
    proprio_id UUID NOT NULL,
    equide_ids UUID[] NOT NULL DEFAULT '{}',
    
    -- Informations du rendez-vous
    main_slot TIMESTAMP WITH TIME ZONE NOT NULL,
    alternative_slots TIMESTAMP WITH TIME ZONE[] DEFAULT '{}',
    duration_minutes INTEGER DEFAULT 60,
    
    -- Statut et gestion
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'rejected', 'rescheduled', 'completed')),
    comment TEXT NOT NULL,
    
    -- Compte rendu
    compte_rendu TEXT,
    compte_rendu_updated_at TIMESTAMP WITH TIME ZONE,
    
    -- M√©tadonn√©es
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. AJOUT DES CONTRAINTES DE CL√âS √âTRANG√àRES (SEULEMENT SI ELLES N'EXISTENT PAS)
-- =====================================================

-- Contrainte FK vers pro_profiles (seulement si elle n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments' 
        AND constraint_name = 'fk_appointments_pro_id'
    ) THEN
        ALTER TABLE public.appointments 
        ADD CONSTRAINT fk_appointments_pro_id 
        FOREIGN KEY (pro_id) REFERENCES public.pro_profiles(user_id) ON DELETE CASCADE;
        RAISE NOTICE '‚úÖ Contrainte FK pro_id ajout√©e';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Contrainte FK pro_id existe d√©j√†';
    END IF;
END $$;

-- Contrainte FK vers proprio_profiles (seulement si elle n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments' 
        AND constraint_name = 'fk_appointments_proprio_id'
    ) THEN
        ALTER TABLE public.appointments 
        ADD CONSTRAINT fk_appointments_proprio_id 
        FOREIGN KEY (proprio_id) REFERENCES public.proprio_profiles(user_id) ON DELETE CASCADE;
        RAISE NOTICE '‚úÖ Contrainte FK proprio_id ajout√©e';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Contrainte FK proprio_id existe d√©j√†';
    END IF;
END $$;

-- 5. CR√âATION DES INDEX (SEULEMENT S'ILS N'EXISTENT PAS)
-- =====================================================

-- Index pour pro_id
CREATE INDEX IF NOT EXISTS idx_appointments_pro_id ON public.appointments(pro_id);

-- Index pour proprio_id  
CREATE INDEX IF NOT EXISTS idx_appointments_proprio_id ON public.appointments(proprio_id);

-- Index pour status
CREATE INDEX IF NOT EXISTS idx_appointments_status ON public.appointments(status);

-- Index pour main_slot
CREATE INDEX IF NOT EXISTS idx_appointments_main_slot ON public.appointments(main_slot);

-- Index pour created_at
CREATE INDEX IF NOT EXISTS idx_appointments_created_at ON public.appointments(created_at);

-- Index GIN pour les recherches dans equide_ids
CREATE INDEX IF NOT EXISTS idx_appointments_equide_ids ON public.appointments USING GIN(equide_ids);

-- 6. ACTIVATION DE RLS (SEULEMENT SI CE N'EST PAS D√âJ√Ä ACTIV√â)
-- =====================================================

-- Activer RLS si ce n'est pas d√©j√† fait
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_class 
        WHERE relname = 'appointments' 
        AND relrowsecurity = true
    ) THEN
        ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE '‚úÖ RLS activ√© pour appointments';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  RLS d√©j√† activ√© pour appointments';
    END IF;
END $$;

-- 7. CR√âATION DES POLITIQUES RLS S√âCURIS√âES
-- =====================================================

-- Supprimer les anciennes politiques si elles existent
DROP POLICY IF EXISTS "Pros can view their appointments" ON public.appointments;
DROP POLICY IF EXISTS "Proprios can view their appointments" ON public.appointments;
DROP POLICY IF EXISTS "Pros can update their appointments" ON public.appointments;
DROP POLICY IF EXISTS "Proprios can create appointments" ON public.appointments;
DROP POLICY IF EXISTS "Proprios can update their appointments" ON public.appointments;

-- Politiques de lecture (SELECT)
CREATE POLICY "Pros can view their appointments" ON public.appointments
    FOR SELECT USING (pro_id = auth.uid());

CREATE POLICY "Proprios can view their appointments" ON public.appointments
    FOR SELECT USING (proprio_id = auth.uid());

-- Politiques de cr√©ation (INSERT)
CREATE POLICY "Proprios can create appointments" ON public.appointments
    FOR INSERT WITH CHECK (proprio_id = auth.uid());

-- Politiques de mise √† jour (UPDATE) - S√âCURIS√âES
-- Le PRO peut modifier : status, compte_rendu, compte_rendu_updated_at
CREATE POLICY "Pros can update appointment status and reports" ON public.appointments
    FOR UPDATE USING (pro_id = auth.uid());

-- Le PROPRIO peut modifier : comment, main_slot, alternative_slots (pour replanification)
CREATE POLICY "Proprios can update appointment details" ON public.appointments
    FOR UPDATE USING (proprio_id = auth.uid());

-- 8. CR√âATION DU TRIGGER POUR updated_at
-- =====================================================

-- Fonction pour mettre √† jour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger pour updated_at (seulement s'il n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.triggers 
        WHERE trigger_name = 'update_appointments_updated_at'
        AND event_object_table = 'appointments'
    ) THEN
        CREATE TRIGGER update_appointments_updated_at 
            BEFORE UPDATE ON public.appointments 
            FOR EACH ROW 
            EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE '‚úÖ Trigger updated_at cr√©√©';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Trigger updated_at existe d√©j√†';
    END IF;
END $$;

-- 9. V√âRIFICATION FINALE
-- =====================================================

-- V√©rifier la structure finale
DO $$
DECLARE
    final_column_count integer;
    final_policy_count integer;
    final_index_count integer;
BEGIN
    -- Compter les colonnes finales
    SELECT COUNT(*) INTO final_column_count
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'appointments';
    
    -- Compter les politiques RLS
    SELECT COUNT(*) INTO final_policy_count
    FROM pg_policies 
    WHERE tablename = 'appointments';
    
    -- Compter les index
    SELECT COUNT(*) INTO final_index_count
    FROM pg_indexes 
    WHERE tablename = 'appointments';
    
    RAISE NOTICE 'üéâ V√âRIFICATION FINALE:';
    RAISE NOTICE '  üìä Colonnes: %', final_column_count;
    RAISE NOTICE '  üîí Politiques RLS: %', final_policy_count;
    RAISE NOTICE '  üìà Index: %', final_index_count;
    RAISE NOTICE '‚úÖ Table appointments pr√™te √† l''utilisation !';
END $$;

-- 10. COMMENTAIRES POUR LA DOCUMENTATION
-- =====================================================

COMMENT ON TABLE public.appointments IS 'Table des rendez-vous entre propri√©taires et professionnels';
COMMENT ON COLUMN public.appointments.pro_id IS 'ID du professionnel concern√© par le rendez-vous';
COMMENT ON COLUMN public.appointments.proprio_id IS 'ID du propri√©taire ayant demand√© le rendez-vous';
COMMENT ON COLUMN public.appointments.equide_ids IS 'Tableau des IDs des √©quid√©s concern√©s par le rendez-vous';
COMMENT ON COLUMN public.appointments.main_slot IS 'Cr√©neau principal propos√© ou confirm√© pour le rendez-vous';
COMMENT ON COLUMN public.appointments.alternative_slots IS 'Tableau des cr√©neaux alternatifs propos√©s par le propri√©taire';
COMMENT ON COLUMN public.appointments.status IS 'Statut actuel du rendez-vous (pending, confirmed, rescheduled, rejected, completed)';
COMMENT ON COLUMN public.appointments.comment IS 'Commentaire ou motif de consultation du propri√©taire';
COMMENT ON COLUMN public.appointments.compte_rendu IS 'Compte-rendu du professionnel apr√®s le rendez-vous';
COMMENT ON COLUMN public.appointments.duration_minutes IS 'Dur√©e estim√©e ou r√©elle du rendez-vous en minutes';
