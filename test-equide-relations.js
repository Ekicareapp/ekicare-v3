// Script de test pour v√©rifier les relations √©quid√©s ‚Üî propri√©taires
// Date: 2025-01-01
// Description: Tester que les √©quid√©s sont correctement li√©s uniquement aux propri√©taires

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testEquideRelations() {
  console.log('üîç Test des relations √©quid√©s ‚Üî propri√©taires\n');

  try {
    // 1. V√©rifier la structure de la table equides
    console.log('1. V√©rification de la structure de la table equides...');
    const { data: equidesStructure, error: equidesError } = await supabase
      .from('equides')
      .select('*')
      .limit(1);

    if (equidesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la structure equides:', equidesError);
      return;
    }

    console.log('‚úÖ Structure equides accessible');

    // 2. V√©rifier qu'il n'y a pas de colonne pro_id dans equides
    console.log('\n2. V√©rification de l\'absence de colonne pro_id dans equides...');
    const { data: equidesColumns, error: columnsError } = await supabase
      .rpc('get_table_columns', { table_name: 'equides' })
      .catch(() => {
        // Fallback: v√©rifier via une requ√™te directe
        return supabase
          .from('equides')
          .select('*')
          .limit(0);
      });

    if (equidesColumns && equidesColumns.length > 0) {
      const hasProId = Object.keys(equidesColumns[0]).includes('pro_id');
      if (hasProId) {
        console.error('‚ùå PROBL√àME: Colonne pro_id trouv√©e dans equides');
        return;
      } else {
        console.log('‚úÖ Aucune colonne pro_id trouv√©e dans equides');
      }
    }

    // 3. V√©rifier que tous les √©quid√©s ont un propri√©taire
    console.log('\n3. V√©rification que tous les √©quid√©s ont un propri√©taire...');
    const { data: equidesWithoutOwner, error: ownerError } = await supabase
      .from('equides')
      .select('id, nom, proprio_id')
      .is('proprio_id', null);

    if (ownerError) {
      console.error('‚ùå Erreur lors de la v√©rification des propri√©taires:', ownerError);
      return;
    }

    if (equidesWithoutOwner && equidesWithoutOwner.length > 0) {
      console.error('‚ùå PROBL√àME: √âquid√©s sans propri√©taire trouv√©s:', equidesWithoutOwner);
      return;
    } else {
      console.log('‚úÖ Tous les √©quid√©s ont un propri√©taire');
    }

    // 4. V√©rifier que les propri√©taires sont valides
    console.log('\n4. V√©rification que les propri√©taires sont valides...');
    const { data: equides, error: equidesListError } = await supabase
      .from('equides')
      .select('id, nom, proprio_id');

    if (equidesListError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©quid√©s:', equidesListError);
      return;
    }

    for (const equide of equides || []) {
      const { data: owner, error: ownerCheckError } = await supabase
        .from('users')
        .select('id, role')
        .eq('id', equide.proprio_id)
        .eq('role', 'PROPRIETAIRE')
        .single();

      if (ownerCheckError || !owner) {
        console.error(`‚ùå PROBL√àME: Propri√©taire invalide pour l'√©quid√© ${equide.nom} (ID: ${equide.id})`);
        return;
      }
    }

    console.log('‚úÖ Tous les propri√©taires sont valides');

    // 5. V√©rifier la structure des appointments
    console.log('\n5. V√©rification de la structure des appointments...');
    const { data: appointments, error: appointmentsError } = await supabase
      .from('appointments')
      .select('id, proprio_id, pro_id, equide_id')
      .limit(5);

    if (appointmentsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des appointments:', appointmentsError);
      return;
    }

    console.log('‚úÖ Structure appointments accessible');
    console.log(`   ${appointments?.length || 0} appointments trouv√©s`);

    // 6. V√©rifier que tous les appointments ont un √©quid√© valide
    console.log('\n6. V√©rification que tous les appointments ont un √©quid√© valide...');
    const { data: appointmentsWithoutEquide, error: equideCheckError } = await supabase
      .from('appointments')
      .select('id, equide_id')
      .is('equide_id', null);

    if (equideCheckError) {
      console.error('‚ùå Erreur lors de la v√©rification des √©quid√©s dans appointments:', equideCheckError);
      return;
    }

    if (appointmentsWithoutEquide && appointmentsWithoutEquide.length > 0) {
      console.error('‚ùå PROBL√àME: Appointments sans √©quid√© trouv√©s:', appointmentsWithoutEquide);
      return;
    } else {
      console.log('‚úÖ Tous les appointments ont un √©quid√© valide');
    }

    // 7. V√©rifier que les professionnels ne peuvent acc√©der aux √©quid√©s que via les appointments
    console.log('\n7. Test de l\'acc√®s des professionnels aux √©quid√©s...');
    
    // Simuler l'acc√®s d'un professionnel (si des donn√©es de test existent)
    const { data: proUsers, error: proUsersError } = await supabase
      .from('users')
      .select('id')
      .eq('role', 'PRO')
      .limit(1);

    if (proUsersError || !proUsers || proUsers.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun professionnel trouv√© pour le test d\'acc√®s');
    } else {
      const proId = proUsers[0].id;
      
      // Tenter d'acc√©der directement aux √©quid√©s (devrait √©chouer avec RLS)
      const { data: directEquidesAccess, error: directAccessError } = await supabase
        .from('equides')
        .select('*')
        .limit(1);

      if (directAccessError) {
        console.log('‚úÖ Acc√®s direct aux √©quid√©s bloqu√© par RLS (attendu)');
      } else {
        console.log('‚ÑπÔ∏è  Acc√®s direct aux √©quid√©s possible (RLS peut √™tre d√©sactiv√© en test)');
      }

      // V√©rifier l'acc√®s via les appointments
      const { data: equidesViaAppointments, error: viaAppointmentsError } = await supabase
        .from('appointments')
        .select(`
          id,
          equide_id,
          equides!inner(id, nom, proprio_id)
        `)
        .eq('pro_id', proId)
        .limit(5);

      if (viaAppointmentsError) {
        console.log('‚ÑπÔ∏è  Aucun appointment trouv√© pour ce professionnel');
      } else {
        console.log(`‚úÖ Acc√®s aux √©quid√©s via appointments: ${equidesViaAppointments?.length || 0} trouv√©s`);
      }
    }

    // 8. R√©sum√© du test
    console.log('\nüéâ R√âSUM√â DU TEST:');
    console.log('‚úÖ Structure de la base de donn√©es correcte');
    console.log('‚úÖ Aucune relation directe equides ‚Üî pro_profiles');
    console.log('‚úÖ Tous les √©quid√©s ont un propri√©taire valide');
    console.log('‚úÖ Tous les appointments ont un √©quid√© valide');
    console.log('‚úÖ Flux de donn√©es respect√©: pros acc√®dent aux √©quid√©s via appointments uniquement');
    console.log('\nüéØ OBJECTIF ATTEINT: Les √©quid√©s sont correctement li√©s uniquement aux propri√©taires !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testEquideRelations();

