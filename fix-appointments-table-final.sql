-- =====================================================
-- SCRIPT FINAL S√âCURIS√â POUR LA TABLE APPOINTMENTS
-- =====================================================
-- Version simplifi√©e sans r√©f√©rences probl√©matiques
-- =====================================================

-- 1. V√âRIFICATION ET CR√âATION DE LA TABLE
-- =====================================================

-- Cr√©er la table seulement si elle n'existe pas
CREATE TABLE IF NOT EXISTS public.appointments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- Relations (cl√©s √©trang√®res)
    pro_id UUID NOT NULL,
    proprio_id UUID NOT NULL,
    equide_ids UUID[] NOT NULL DEFAULT '{}',
    
    -- Informations du rendez-vous
    main_slot TIMESTAMP WITH TIME ZONE NOT NULL,
    alternative_slots TIMESTAMP WITH TIME ZONE[] DEFAULT '{}',
    duration_minutes INTEGER DEFAULT 60,
    
    -- Statut et gestion
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'rejected', 'rescheduled', 'completed')),
    comment TEXT NOT NULL,
    
    -- Compte rendu
    compte_rendu TEXT,
    compte_rendu_updated_at TIMESTAMP WITH TIME ZONE,
    
    -- M√©tadonn√©es
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. AJOUT DES CONTRAINTES DE CL√âS √âTRANG√àRES
-- =====================================================

-- Contrainte FK vers pro_profiles (seulement si elle n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments' 
        AND constraint_name = 'fk_appointments_pro_id'
    ) THEN
        ALTER TABLE public.appointments 
        ADD CONSTRAINT fk_appointments_pro_id 
        FOREIGN KEY (pro_id) REFERENCES public.pro_profiles(user_id) ON DELETE CASCADE;
        RAISE NOTICE '‚úÖ Contrainte FK pro_id ajout√©e';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Contrainte FK pro_id existe d√©j√†';
    END IF;
END $$;

-- Contrainte FK vers proprio_profiles (seulement si elle n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'appointments' 
        AND constraint_name = 'fk_appointments_proprio_id'
    ) THEN
        ALTER TABLE public.appointments 
        ADD CONSTRAINT fk_appointments_proprio_id 
        FOREIGN KEY (proprio_id) REFERENCES public.proprio_profiles(user_id) ON DELETE CASCADE;
        RAISE NOTICE '‚úÖ Contrainte FK proprio_id ajout√©e';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Contrainte FK proprio_id existe d√©j√†';
    END IF;
END $$;

-- 3. CR√âATION DES INDEX
-- =====================================================

-- Index pour pro_id
CREATE INDEX IF NOT EXISTS idx_appointments_pro_id ON public.appointments(pro_id);

-- Index pour proprio_id  
CREATE INDEX IF NOT EXISTS idx_appointments_proprio_id ON public.appointments(proprio_id);

-- Index pour status
CREATE INDEX IF NOT EXISTS idx_appointments_status ON public.appointments(status);

-- Index pour main_slot
CREATE INDEX IF NOT EXISTS idx_appointments_main_slot ON public.appointments(main_slot);

-- Index pour created_at
CREATE INDEX IF NOT EXISTS idx_appointments_created_at ON public.appointments(created_at);

-- Index GIN pour les recherches dans equide_ids
CREATE INDEX IF NOT EXISTS idx_appointments_equide_ids ON public.appointments USING GIN(equide_ids);

-- 4. ACTIVATION DE RLS
-- =====================================================

-- Activer RLS si ce n'est pas d√©j√† fait
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_class 
        WHERE relname = 'appointments' 
        AND relrowsecurity = true
    ) THEN
        ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;
        RAISE NOTICE '‚úÖ RLS activ√© pour appointments';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  RLS d√©j√† activ√© pour appointments';
    END IF;
END $$;

-- 5. CR√âATION DES POLITIQUES RLS SIMPLIFI√âES
-- =====================================================

-- Supprimer les anciennes politiques si elles existent (sans erreur si elles n'existent pas)
DO $$
BEGIN
    BEGIN
        DROP POLICY IF EXISTS "Pros can view their appointments" ON public.appointments;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique "Pros can view their appointments" non trouv√©e';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Proprios can view their appointments" ON public.appointments;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique "Proprios can view their appointments" non trouv√©e';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Pros can update their appointments" ON public.appointments;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique "Pros can update their appointments" non trouv√©e';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Proprios can create appointments" ON public.appointments;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique "Proprios can create appointments" non trouv√©e';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Proprios can update their appointments" ON public.appointments;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique "Proprios can update their appointments" non trouv√©e';
    END;
END $$;

-- Cr√©er les politiques RLS de mani√®re s√©curis√©e
DO $$
BEGIN
    -- Politiques de lecture (SELECT)
    BEGIN
        CREATE POLICY "Pros can view their appointments" ON public.appointments
            FOR SELECT USING (pro_id = auth.uid());
        RAISE NOTICE '‚úÖ Politique SELECT pour les pros cr√©√©e';
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique SELECT pour les pros existe d√©j√†';
    END;

    BEGIN
        CREATE POLICY "Proprios can view their appointments" ON public.appointments
            FOR SELECT USING (proprio_id = auth.uid());
        RAISE NOTICE '‚úÖ Politique SELECT pour les propri√©taires cr√©√©e';
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique SELECT pour les propri√©taires existe d√©j√†';
    END;

    -- Politiques de cr√©ation (INSERT)
    BEGIN
        CREATE POLICY "Proprios can create appointments" ON public.appointments
            FOR INSERT WITH CHECK (proprio_id = auth.uid());
        RAISE NOTICE '‚úÖ Politique INSERT pour les propri√©taires cr√©√©e';
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique INSERT pour les propri√©taires existe d√©j√†';
    END;

    -- Politiques de mise √† jour (UPDATE)
    BEGIN
        CREATE POLICY "Pros can update their appointments" ON public.appointments
            FOR UPDATE USING (pro_id = auth.uid());
        RAISE NOTICE '‚úÖ Politique UPDATE pour les pros cr√©√©e';
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique UPDATE pour les pros existe d√©j√†';
    END;

    BEGIN
        CREATE POLICY "Proprios can update their appointments" ON public.appointments
            FOR UPDATE USING (proprio_id = auth.uid());
        RAISE NOTICE '‚úÖ Politique UPDATE pour les propri√©taires cr√©√©e';
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE '‚ÑπÔ∏è  Politique UPDATE pour les propri√©taires existe d√©j√†';
    END;
END $$;

-- 6. CR√âATION DU TRIGGER POUR updated_at
-- =====================================================

-- Fonction pour mettre √† jour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger pour updated_at (seulement s'il n'existe pas)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.triggers 
        WHERE trigger_name = 'update_appointments_updated_at'
        AND event_object_table = 'appointments'
    ) THEN
        CREATE TRIGGER update_appointments_updated_at 
            BEFORE UPDATE ON public.appointments 
            FOR EACH ROW 
            EXECUTE FUNCTION update_updated_at_column();
        RAISE NOTICE '‚úÖ Trigger updated_at cr√©√©';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è  Trigger updated_at existe d√©j√†';
    END IF;
END $$;

-- 7. COMMENTAIRES POUR LA DOCUMENTATION
-- =====================================================

COMMENT ON TABLE public.appointments IS 'Table des rendez-vous entre propri√©taires et professionnels';
COMMENT ON COLUMN public.appointments.pro_id IS 'ID du professionnel concern√© par le rendez-vous';
COMMENT ON COLUMN public.appointments.proprio_id IS 'ID du propri√©taire ayant demand√© le rendez-vous';
COMMENT ON COLUMN public.appointments.equide_ids IS 'Tableau des IDs des √©quid√©s concern√©s par le rendez-vous';
COMMENT ON COLUMN public.appointments.main_slot IS 'Cr√©neau principal propos√© ou confirm√© pour le rendez-vous';
COMMENT ON COLUMN public.appointments.alternative_slots IS 'Tableau des cr√©neaux alternatifs propos√©s par le propri√©taire';
COMMENT ON COLUMN public.appointments.status IS 'Statut actuel du rendez-vous (pending, confirmed, rescheduled, rejected, completed)';
COMMENT ON COLUMN public.appointments.comment IS 'Commentaire ou motif de consultation du propri√©taire';
COMMENT ON COLUMN public.appointments.compte_rendu IS 'Compte-rendu du professionnel apr√®s le rendez-vous';
COMMENT ON COLUMN public.appointments.duration_minutes IS 'Dur√©e estim√©e ou r√©elle du rendez-vous en minutes';

-- 8. MESSAGE DE SUCC√àS
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE 'üéâ TABLE APPOINTMENTS CONFIGUR√âE AVEC SUCC√àS !';
    RAISE NOTICE '‚úÖ Structure de la table cr√©√©e';
    RAISE NOTICE '‚úÖ Contraintes de cl√©s √©trang√®res ajout√©es';
    RAISE NOTICE '‚úÖ Index de performance cr√©√©s';
    RAISE NOTICE '‚úÖ RLS activ√© et politiques configur√©es';
    RAISE NOTICE '‚úÖ Trigger updated_at configur√©';
    RAISE NOTICE 'üöÄ Le syst√®me de rendez-vous est pr√™t √† l''utilisation !';
END $$;
