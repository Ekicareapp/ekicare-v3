// Script pour cr√©er un client de test en contournant les contraintes
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Charger les variables d'environnement
require('dotenv').config({ path: path.join(__dirname, '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createTestClientBypass() {
  console.log('üß™ Cr√©ation d\'un client de test (contournement)');
  console.log('==============================================');

  try {
    // 1. R√©cup√©rer les donn√©es
    console.log('\n1Ô∏è‚É£ R√©cup√©ration des donn√©es...');
    const { data: pros, error: prosError } = await supabase
      .from('pro_profiles')
      .select('id, user_id, prenom, nom')
      .limit(1);

    if (prosError || !pros || pros.length === 0) {
      console.error('‚ùå Aucun PRO trouv√©:', prosError);
      return;
    }

    const pro = pros[0];
    console.log(`‚úÖ PRO: ${pro.prenom} ${pro.nom} (ID: ${pro.id})`);

    const { data: proprios, error: propriosError } = await supabase
      .from('proprio_profiles')
      .select('id, user_id, prenom, nom')
      .limit(1);

    if (propriosError || !proprios || proprios.length === 0) {
      console.error('‚ùå Aucun PROPRIO trouv√©:', propriosError);
      return;
    }

    const proprio = proprios[0];
    console.log(`‚úÖ PROPRIO: ${proprio.prenom} ${proprio.nom} (ID: ${proprio.id})`);

    // 2. Cr√©er un client de test avec des donn√©es mock√©es
    console.log('\n2Ô∏è‚É£ Cr√©ation d\'un client de test...');
    
    // Utiliser l'API directement avec des donn√©es mock√©es
    const mockClient = {
      id: proprio.id,
      nom: proprio.nom || 'Test',
      prenom: proprio.prenom || 'Client',
      photo: null,
      telephone: '06 12 34 56 78',
      adresse: '123 Rue de Test, 75001 Paris',
      totalRendezVous: 1,
      derniereVisite: new Date().toISOString(),
      dateAjout: new Date().toISOString()
    };

    console.log('‚úÖ Client de test cr√©√© (donn√©es mock√©es)');
    console.log(`   ${mockClient.prenom} ${mockClient.nom}`);
    console.log(`   T√©l√©phone: ${mockClient.telephone}`);
    console.log(`   Adresse: ${mockClient.adresse}`);

    // 3. Cr√©er un fichier de test pour l'API
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'un fichier de test pour l\'API...');
    const testData = {
      data: [mockClient]
    };

    fs.writeFileSync('test-clients-data.json', JSON.stringify(testData, null, 2));
    console.log('‚úÖ Fichier test-clients-data.json cr√©√©');

    // 4. Modifier temporairement l'API pour utiliser les donn√©es de test
    console.log('\n4Ô∏è‚É£ Instructions pour tester:');
    console.log('1. Connectez-vous en tant que PRO (pro@test.com / 142536)');
    console.log('2. Allez dans "Mes clients"');
    console.log('3. Si l\'erreur persiste, v√©rifiez la console du navigateur (F12)');
    console.log('4. Regardez les logs du serveur Next.js pour voir les d√©tails d\'authentification');

    console.log('\nüìã Donn√©es de test cr√©√©es:');
    console.log(JSON.stringify(mockClient, null, 2));

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

createTestClientBypass();





