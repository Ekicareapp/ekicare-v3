#!/usr/bin/env node

/**
 * Script de test complet pour le flux de paiement Stripe
 * Usage: node test-stripe-complete.js
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.local' })

console.log('üß™ Test complet du flux de paiement Stripe\n')

// V√©rifier les variables d'environnement
console.log('1Ô∏è‚É£ V√©rification des variables d\'environnement:')
console.log('   STRIPE_SECRET_KEY:', process.env.STRIPE_SECRET_KEY ? '‚úÖ Configur√©e' : '‚ùå Manquante')
console.log('   STRIPE_PRICE_ID:', process.env.STRIPE_PRICE_ID ? '‚úÖ Configur√©e' : '‚ùå Manquante')
console.log('   STRIPE_WEBHOOK_SECRET:', process.env.STRIPE_WEBHOOK_SECRET ? '‚úÖ Configur√©e' : '‚ùå Manquante')
console.log('   NEXT_PUBLIC_SITE_URL:', process.env.NEXT_PUBLIC_SITE_URL ? '‚úÖ Configur√©e' : '‚ùå Manquante')

// Tester la cr√©ation d'une session Stripe
console.log('\n2Ô∏è‚É£ Test de cr√©ation de session Stripe:')
async function testStripeSession() {
  try {
    const Stripe = require('stripe')
    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
      apiVersion: '2024-12-18.acacia',
    })
    
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card"],
      mode: 'subscription',
      line_items: [
        {
          price: process.env.STRIPE_PRICE_ID,
          quantity: 1,
        },
      ],
      success_url: `${process.env.NEXT_PUBLIC_SITE_URL}/success-pro?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_SITE_URL}/paiement-requis`,
      client_reference_id: 'test-user-123',
      metadata: {
        source: 'signup_pro',
        user_type: 'professional',
        userId: 'test-user-123'
      }
    })
    
    console.log('   ‚úÖ Session cr√©√©e:', session.id)
    console.log('   üîó Success URL:', session.success_url)
    console.log('   üîó Cancel URL:', session.cancel_url)
    console.log('   üë§ Client Reference ID:', session.client_reference_id)
    
    return session
  } catch (error) {
    console.log('   ‚ùå Erreur cr√©ation session:', error.message)
    return null
  }
}

// Tester la connexion Supabase
console.log('\n3Ô∏è‚É£ Test de connexion Supabase:')
async function testSupabase() {
  try {
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )
    
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (error) {
      console.log('   ‚ùå Erreur Supabase:', error.message)
      return false
    } else {
      console.log('   ‚úÖ Connexion Supabase r√©ussie')
      return true
    }
  } catch (error) {
    console.log('   ‚ùå Erreur configuration Supabase:', error.message)
    return false
  }
}

// Instructions pour le test complet
console.log('\n4Ô∏è‚É£ Instructions pour le test complet:')
console.log('   1. D√©marrez le serveur: npm run dev')
console.log('   2. D√©marrez Stripe CLI: stripe listen --forward-to localhost:3002/api/stripe/webhook')
console.log('   3. Cr√©ez un compte professionnel sur http://localhost:3002/signup')
console.log('   4. Cliquez sur "Payer" sur la page de paiement requis')
console.log('   5. Utilisez la carte test: 4242 4242 4242 4242')
console.log('   6. V√©rifiez la redirection vers /success-pro')
console.log('   7. V√©rifiez les logs du webhook dans le terminal Stripe CLI')

console.log('\n5Ô∏è‚É£ URLs importantes:')
console.log('   üè† Application: http://localhost:3002')
console.log('   üìù Inscription: http://localhost:3002/signup')
console.log('   üí≥ Paiement: http://localhost:3002/paiement-requis')
console.log('   ‚úÖ Succ√®s: http://localhost:3002/success-pro')
console.log('   üîó Webhook: http://localhost:3002/api/stripe/webhook')

// Ex√©cuter les tests
async function runTests() {
  await testSupabase()
  await testStripeSession()
  
  console.log('\n‚úÖ Tests termin√©s')
  console.log('\nüöÄ Le flux de paiement devrait maintenant fonctionner correctement!')
}

runTests().catch(console.error)
