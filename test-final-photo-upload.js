#!/usr/bin/env node

/**
 * üéØ TEST FINAL DE L'UPLOAD DE PHOTO
 * Teste l'upload de photo pour les professionnels
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testFinalPhotoUpload() {
  console.log('üéØ TEST FINAL DE L\'UPLOAD DE PHOTO')
  console.log('==================================')

  try {
    // 1. R√©cup√©rer un profil professionnel existant
    console.log('\nüë®‚Äç‚öïÔ∏è R√âCUP√âRATION D\'UN PROFIL PROFESSIONNEL:')
    const { data: proProfiles, error: proError } = await supabase
      .from('pro_profiles')
      .select('user_id, prenom, nom, photo_url')
      .limit(1)

    if (proError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', proError)
      return
    }

    if (!proProfiles || proProfiles.length === 0) {
      console.log('‚ö†Ô∏è  Aucun profil professionnel trouv√©')
      return
    }

    const profile = proProfiles[0]
    console.log(`   Profil: ${profile.prenom} ${profile.nom}`)
    console.log(`   ID: ${profile.user_id}`)
    console.log(`   Photo actuelle: ${profile.photo_url || 'Aucune'}`)

    // 2. Cr√©er une image de test
    console.log('\nüñºÔ∏è  CR√âATION D\'UNE IMAGE DE TEST:')
    const testImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, // RGB, no compression
      0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, // IDAT chunk
      0x54, 0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, // compressed data
      0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, // IEND chunk
      0x60, 0x82
    ])
    
    const testFile = new File([testImageBuffer], 'test-profile.png', { type: 'image/png' })
    console.log('‚úÖ Image de test cr√©√©e')

    // 3. Test d'upload vers le bucket avatars
    console.log('\nüì§ TEST D\'UPLOAD VERS LE BUCKET avatars:')
    const filePath = `${profile.user_id}/profile.jpg`
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(filePath, testFile, {
        cacheControl: '3600',
        upsert: true
      })

    if (uploadError) {
      console.log(`‚ùå Erreur upload: ${uploadError.message}`)
      return
    }

    console.log('‚úÖ Upload r√©ussi')
    console.log(`   Chemin: ${uploadData.path}`)

    // 4. R√©cup√©rer l'URL publique
    console.log('\nüîó R√âCUP√âRATION DE L\'URL PUBLIQUE:')
    const { data: urlData } = supabase.storage
      .from('avatars')
      .getPublicUrl(filePath)

    console.log(`‚úÖ URL publique: ${urlData.publicUrl}`)

    // 5. Mettre √† jour le profil avec l'URL de la photo
    console.log('\nüíæ MISE √Ä JOUR DU PROFIL:')
    const { error: updateError } = await supabase
      .from('pro_profiles')
      .update({ photo_url: urlData.publicUrl })
      .eq('user_id', profile.user_id)

    if (updateError) {
      console.log(`‚ùå Erreur mise √† jour: ${updateError.message}`)
      return
    }

    console.log('‚úÖ Profil mis √† jour avec l\'URL de la photo')

    // 6. V√©rifier que la photo est bien sauvegard√©e
    console.log('\n‚úÖ V√âRIFICATION DE LA SAUVEGARDE:')
    const { data: updatedProfile, error: verifyError } = await supabase
      .from('pro_profiles')
      .select('photo_url')
      .eq('user_id', profile.user_id)
      .single()

    if (verifyError) {
      console.log(`‚ùå Erreur v√©rification: ${verifyError.message}`)
    } else {
      console.log(`‚úÖ Photo sauvegard√©e: ${updatedProfile.photo_url}`)
    }

    // 7. Test d'affichage de l'image
    console.log('\nüñºÔ∏è  TEST D\'AFFICHAGE DE L\'IMAGE:')
    try {
      const response = await fetch(urlData.publicUrl)
      if (response.ok) {
        console.log('‚úÖ Image accessible via URL publique')
        console.log(`   Taille: ${response.headers.get('content-length')} bytes`)
        console.log(`   Type: ${response.headers.get('content-type')}`)
      } else {
        console.log(`‚ùå Image non accessible: ${response.status}`)
      }
    } catch (error) {
      console.log(`‚ùå Erreur lors du test d\'affichage: ${error.message}`)
    }

    // 8. Nettoyage (optionnel)
    console.log('\nüßπ NETTOYAGE:')
    const { error: deleteError } = await supabase.storage
      .from('avatars')
      .remove([filePath])

    if (deleteError) {
      console.log(`‚ö†Ô∏è  Erreur suppression: ${deleteError.message}`)
    } else {
      console.log('‚úÖ Fichier de test supprim√©')
    }

    console.log('\nüéâ TEST TERMIN√â AVEC SUCC√àS !')
    console.log('üìã R√©sum√©:')
    console.log('   ‚úÖ Buckets Supabase Storage configur√©s')
    console.log('   ‚úÖ Upload de photos fonctionnel')
    console.log('   ‚úÖ URLs publiques g√©n√©r√©es')
    console.log('   ‚úÖ Mise √† jour des profils fonctionnelle')
    console.log('   ‚úÖ Affichage des images op√©rationnel')

    console.log('\nüí° INSTRUCTIONS POUR L\'UTILISATEUR:')
    console.log('   1. Allez dans "Mon profil" dans le dashboard')
    console.log('   2. Cliquez sur "Ajouter une photo" ou "Remplacer la photo"')
    console.log('   3. S√©lectionnez une image (JPEG, PNG, max 5MB)')
    console.log('   4. L\'image sera automatiquement upload√©e et sauvegard√©e')
    console.log('   5. L\'image s\'affichera imm√©diatement dans votre profil')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testFinalPhotoUpload()
