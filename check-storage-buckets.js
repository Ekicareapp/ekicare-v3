#!/usr/bin/env node

/**
 * üîç V√âRIFICATION DES BUCKETS SUPABASE STORAGE
 * V√©rifie l'existence et la configuration des buckets pour les photos de profil
 */

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Charger les variables d'environnement depuis .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env.local')
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå Fichier .env.local non trouv√©')
    process.exit(1)
  }

  const envContent = fs.readFileSync(envPath, 'utf8')
  const envVars = {}
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      envVars[key.trim()] = value
    }
  })
  
  return envVars
}

// Charger les variables d'environnement
const env = loadEnvFile()

// Configuration Supabase
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes dans .env.local')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkStorageBuckets() {
  console.log('üîç V√âRIFICATION DES BUCKETS SUPABASE STORAGE')
  console.log('============================================')

  try {
    // 1. Lister tous les buckets existants
    console.log('\nüì¶ BUCKETS EXISTANTS:')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()

    if (bucketsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketsError)
      return
    }

    if (!buckets || buckets.length === 0) {
      console.log('‚ö†Ô∏è  Aucun bucket trouv√©')
    } else {
      console.log(`üìà Nombre de buckets: ${buckets.length}`)
      buckets.forEach((bucket, index) => {
        console.log(`   ${index + 1}. ${bucket.name}`)
        console.log(`      ID: ${bucket.id}`)
        console.log(`      Public: ${bucket.public ? '‚úÖ OUI' : '‚ùå NON'}`)
        console.log(`      Cr√©√©: ${bucket.created_at}`)
        console.log('')
      })
    }

    // 2. V√©rifier sp√©cifiquement les buckets pour les photos de profil
    console.log('üñºÔ∏è  RECHERCHE DE BUCKETS POUR PHOTOS DE PROFIL:')
    const profileBuckets = buckets?.filter(bucket => 
      bucket.name.includes('profile') || 
      bucket.name.includes('avatar') || 
      bucket.name.includes('photo') ||
      bucket.name.includes('picture')
    ) || []

    if (profileBuckets.length === 0) {
      console.log('‚ùå Aucun bucket d√©di√© aux photos de profil trouv√©')
      console.log('   Buckets recherch√©s: profile_pictures, avatars, photos, pictures')
    } else {
      console.log(`‚úÖ ${profileBuckets.length} bucket(s) pour photos de profil trouv√©(s):`)
      profileBuckets.forEach(bucket => {
        console.log(`   - ${bucket.name} (Public: ${bucket.public ? 'OUI' : 'NON'})`)
      })
    }

    // 3. V√©rifier les policies des buckets de photos
    if (profileBuckets.length > 0) {
      console.log('\nüîê POLICIES DES BUCKETS DE PHOTOS:')
      for (const bucket of profileBuckets) {
        console.log(`\nüìã Bucket: ${bucket.name}`)
        
        // Note: L'API Supabase ne permet pas de lister les policies directement
        // Il faudrait les v√©rifier manuellement dans le dashboard Supabase
        console.log('   ‚ö†Ô∏è  Policies √† v√©rifier manuellement dans le dashboard Supabase')
        console.log('   üìç Dashboard > Storage > Policies')
      }
    }

    // 4. Tester l'acc√®s aux buckets
    console.log('\nüß™ TEST D\'ACC√àS AUX BUCKETS:')
    for (const bucket of buckets || []) {
      try {
        const { data: files, error: listError } = await supabase.storage
          .from(bucket.name)
          .list('', { limit: 1 })

        if (listError) {
          console.log(`   ‚ùå ${bucket.name}: ${listError.message}`)
        } else {
          console.log(`   ‚úÖ ${bucket.name}: Accessible (${files?.length || 0} fichiers)`)
        }
      } catch (error) {
        console.log(`   ‚ùå ${bucket.name}: Erreur - ${error.message}`)
      }
    }

    // 5. Recommandations
    console.log('\nüí° RECOMMANDATIONS:')
    if (profileBuckets.length === 0) {
      console.log('   1. Cr√©er un bucket "profile_pictures" ou "avatars"')
      console.log('   2. Configurer les policies RLS appropri√©es')
      console.log('   3. Rendre le bucket public pour l\'affichage des images')
    } else {
      console.log('   1. V√©rifier que les policies RLS sont correctement configur√©es')
      console.log('   2. S\'assurer que le bucket est public pour l\'affichage')
      console.log('   3. V√©rifier que le code frontend utilise le bon nom de bucket')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des buckets:', error)
  }
}

// Ex√©cuter la v√©rification
checkStorageBuckets()
